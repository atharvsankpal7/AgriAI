{"version":3,"file":"static/js/451.d77698dd.chunk.js","mappings":"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","sources":["components/Home.jsx"],"sourcesContent":["import \"../App.css\";\r\nimport \"../css/backgroundImage.css\";\r\nimport NoteContext from \"../context/notes/NoteContext\";\r\nimport React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { message } from \"antd\";\r\n\r\nconst Home = () => {\r\n    const noteContext = useContext(NoteContext);\r\n    const navigate = useNavigate();\r\n    const [messageApi, contextHolder] = message.useMessage();\r\n    const url = \"http://localhost:5000/api/\";\r\n\r\n    // Destructuring\r\n    const { notes, setNotes } = noteContext;\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const [uploadingStatus, setUploadingStatus] = useState(false);\r\n    const [cameraStream, setCameraStream] = useState(null);\r\n    const videoRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem(\"token\")) {\r\n            navigate(\"/login\");\r\n        } else {\r\n            getNotes();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // Cleanup: stop media stream when component unmounts\r\n            if (cameraStream) {\r\n                cameraStream.getTracks().forEach((track) => {\r\n                    track.stop();\r\n                });\r\n            }\r\n        };\r\n    }, [cameraStream]);\r\n\r\n    const getNotes = async () => {\r\n        try {\r\n            const response = await fetch(`${url}notes/getallnotes`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"auth-token\": localStorage.getItem(\"token\"),\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            setNotes(data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching notes:\", error);\r\n        }\r\n    };\r\n\r\n    const handleCameraCapture = async () => {\r\n        setSelectedImage(0)\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                video: true,\r\n            });\r\n            setCameraStream(stream);\r\n            // Display camera stream in the <video> element\r\n            if (videoRef.current) {\r\n                videoRef.current.srcObject = stream;\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error accessing camera:\", error);\r\n        }\r\n    };\r\n\r\n    const handleTakePicture = () => {\r\n        if (videoRef.current) {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = videoRef.current.videoWidth;\r\n            canvas.height = videoRef.current.videoHeight;\r\n            ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n            const base64String = canvas.toDataURL(\"image/png\");\r\n            setSelectedImage(base64String);\r\n            // Stop camera stream after capturing the picture\r\n            if (cameraStream) {\r\n                cameraStream.getTracks().forEach((track) => {\r\n                    track.stop();\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleInputImageChange = (e) => {\r\n        try {\r\n            const file = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setSelectedImage(reader.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const uploadImage = async () => {\r\n        setUploadingStatus(true);\r\n        try {\r\n            messageApi.open({\r\n                type: \"loading\",\r\n                content: \"Uploading Image...\",\r\n                duration: 0,\r\n            });\r\n            const response = await fetch(`${url}notes/addnote`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem(\"token\"),\r\n                },\r\n                body: JSON.stringify({\r\n                    baseImage: selectedImage,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                messageApi.destroy();\r\n                messageApi.error(\"Error Uploading Image\");\r\n                setUploadingStatus(false);\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            const currentNotes = notes;\r\n            currentNotes.push(data);\r\n            setNotes(currentNotes);\r\n            setSelectedImage(null);\r\n            getNotes();\r\n            messageApi.destroy();\r\n            messageApi.success(\"Successfully uploaded image\");\r\n            setUploadingStatus(false);\r\n        } catch (error) {\r\n            messageApi.destroy();\r\n            messageApi.error(\"Error Uploading Image\");\r\n            setUploadingStatus(false);\r\n            console.error(\"Error Uploading notes:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\" pt-3 pb-3 \">\r\n            {contextHolder}\r\n            <div className=\"container d-flex flex-column align-items-center justify-content-center text-xxl-center backgroundImage w-75\">\r\n                <h2\r\n                    className=\"text-center fs-1 font-monospace pt-3 \"\r\n                    style={{ color: \"red\" }}\r\n                >\r\n                    Welcome back,{\" \"}\r\n                    {localStorage.getItem(\"username\")\r\n                        ? localStorage.getItem(\"username\")\r\n                        : \"username\"}{\" \"}\r\n                    !!!\r\n                </h2>\r\n                <div className=\"image-upload-container  \">\r\n                    <div className=\"img \">\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            name=\"\"\r\n                            id=\"image_upload\"\r\n                            hidden\r\n                            onChange={handleInputImageChange}\r\n                        />\r\n                        <label\r\n                            htmlFor=\"image_upload\"\r\n                            className=\"w-100 h-100 d-flex align-items-center justify-content-center\"\r\n                        >\r\n                            {selectedImage === null ? (\r\n                                <img\r\n                                    src=\"upload.png\"\r\n                                    alt=\"Browse Images\"\r\n                                    className=\"w-50 h-100\"\r\n                                />\r\n                            ) : selectedImage ? (\r\n                                <img\r\n                                    src={selectedImage}\r\n                                    alt=\"selectedImage\"\r\n                                    className=\"w-100 h-100\"\r\n                                />\r\n                            ) : (\r\n                                <video\r\n                                    ref={videoRef}\r\n                                    autoPlay\r\n                                    muted\r\n                                    className=\"w-100 h-100\"\r\n                                ></video>\r\n                            )}\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            <button\r\n                                className=\"btn btn-outline-dark border-2 my-3 text-dark-emphasis fs-4\"\r\n                                onClick={handleCameraCapture}\r\n                            >\r\n                                Open Camera\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-outline-dark border-2 my-3 text-dark-emphasis fs-4\"\r\n                                onClick={handleTakePicture}\r\n                            >\r\n                                Capture Image\r\n                            </button>\r\n                        </div>\r\n\r\n                        <button\r\n                            className=\"btn btn-outline-dark border-2 w-100 my-3 text-dark-emphasis fs-4\"\r\n                            onClick={uploadImage}\r\n                            disabled={!selectedImage || uploadingStatus}\r\n                        >\r\n                            Upload Image\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["Home","noteContext","useContext","NoteContext","navigate","useNavigate","messageApi","contextHolder","message","useMessage","url","notes","setNotes","selectedImage","setSelectedImage","useState","uploadingStatus","setUploadingStatus","cameraStream","setCameraStream","videoRef","useRef","useEffect","localStorage","getItem","getNotes","getTracks","forEach","track","stop","async","response","fetch","concat","method","headers","ok","data","json","error","console","_jsxs","className","children","style","color","_jsx","type","accept","name","id","hidden","onChange","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","log","htmlFor","src","alt","ref","autoPlay","muted","onClick","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","handleTakePicture","canvas","document","createElement","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","base64String","toDataURL","open","content","duration","body","JSON","stringify","baseImage","destroy","currentNotes","push","success","disabled"],"sourceRoot":""}